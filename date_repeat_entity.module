<?php

/**
 * @file
 */

/**
 * Implements hook_entity presave().
 */
function date_repeat_entity_presave($entity, $entity_type) {

  // get entity wrapper
  $wrapper = entity_metadata_wrapper($entity_type, $entity);

  // gec node type (bundle)
  $bundle = $wrapper->getBundle();

  // process event nodes
  if ($bundle === 'event') {

    // determine if this is a new or updated event
    if ($entity->is_new) {

      // get value of clone state - a new event node will have the default state of FALSE
      // while a cloned event node will have a state of TRUE
      $field_clone_state = $wrapper->field_clone_state->value();

      // clone the new event node and its attached fields using Replicate API module
      if ($field_clone_state === FALSE) {
        $clone = replicate_clone_entity($entity_type, $entity);

        // get entity wrapper for the cloned node
        $clone_wrapper = entity_metadata_wrapper($entity_type, $clone);

        // flag the node as cloned
        $clone_wrapper->field_clone_state = TRUE;

        // save the clone
        entity_save($entity_type, $clone);
      }
    }
    else {
      
      // event is being updated
      // check if date field has changed
      $new_date = $wrapper->field_date;
      
      $test = $wrapper->data;
      
      $properties = $wrapper->getPropertyInfo();
      
      dpm($properties);
      //$old_date = $wrapper->getBundle()->data->original->field_date;
      
      //if ($old_date === $new_date) {
        //
        // data has changed
      //  $test = TRUE;
      //}
      
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function date_repeat_entity_form_event_node_form_alter(&$form, &$form_state, $form_id) {

  // hide the clone state from the event edit form 
  $form['field_clone_state']['#access'] = FALSE;
}

