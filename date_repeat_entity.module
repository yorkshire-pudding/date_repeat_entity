
<?php

/**
 * @file
 */

/**
 * Implements hook_entity presave().
 */
function date_repeat_entity_presave($entity, $entity_type) {

  // get entity wrapper
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  $id = $wrapper->getIdentifier();

  // at the moment we are only considering node entities so we need check
  // the entity type is node
  if ($entity_type === 'node') {

    // get node type (bundle)
    $bundle = $wrapper->getBundle();

    // process event nodes - ideally we should be able to work on bundles
    // any time but the field_clone_state is part of the event bundle so
    // we need to test for the 'event' bundle type
    if ($bundle === 'event') {

      // determine if this is a new or updated event
      if ($entity->is_new) {

        // get value of clone state - a new event node will have the default state of FALSE
        // while a cloned event node will have a state of TRUE
        $field_clone_state = $wrapper->field_clone_state->value();

        // clone the new event node and its attached fields using Replicate API module
        if ($field_clone_state === FALSE) {

          //$fields = field_info_field_map();
          $fields = field_info_fields();
          foreach ($fields as $field_name => $field) {
            if (in_array($field['type'], array('date', 'datestamp', 'datetime'))
                && date_is_repeat_field($field)) {
              foreach ($field['bundles'] as $field_entity_type => $bundles) {
                foreach ($bundles as $field_bundle) {
                  if ($entity_type == $field_entity_type
                      && $bundle == $field_bundle) {
                    
                    // get an array of field data for the current entity
                    $field_data = field_get_items($entity_type, $entity, $field_name);

                    // remove the first item in the array since it is the original (master) entity
                    array_shift($field_data);
                    
                    // clone a new entity for each date in series
                    foreach ($field_data as $datum) {

                      // clone entity
                      $clone = replicate_clone_entity($entity_type, $entity);

                      // get entity wrapper for the cloned node
                      $clone_wrapper = entity_metadata_wrapper($entity_type, $clone);

                      // flag the node as cloned
                      $clone_wrapper->field_clone_state = TRUE;
                      
                      // amend the title to indicate it has been cloned
                      // *** remove in production code *** 
                      $clone_wrapper->title = $wrapper->label() . " clone " . $datum['value'];

                      // update the entities instance field values or store
                      // start and end date of each instance in separate fields

                      // save the clone
                      entity_save($entity_type, $clone);
                    }
                  }
                }
              }
            }
          }
        }
      }
      else {

        // event is being updated
        // check if date field has changed
        // get current field date that is being saved
        $new_date_value_start = $wrapper->field_date[0]->value->value();
        $new_date_value_end = $wrapper->field_date[0]->value2->value();

        // get field date prior to update
        $old_entity = entity_load_unchanged($entity_type, $id);
        $old_wrapper = entity_metadata_wrapper($entity_type, $old_entity);
        $old_date_value_start = $old_wrapper->field_date[0]->value->value();
        $old_date_value_end = $old_wrapper->field_date[0]->value2->value();

        // get rrule
        // note : using EntityDataWrapper to retrieve the string from the
        // rrule field results in an exception thrown so alternate method
        // using DateRepeat API is needed
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function date_repeat_entity_form_event_node_form_alter(&$form, &$form_state, $form_id) {

  // hide the clone state from the event edit form
  $form['field_clone_state']['#access'] = FALSE;
}

